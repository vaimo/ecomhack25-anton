import type { Bundle } from './ai';

console.log('üîå Klaviyo: Initializing REST API client...');

const KLAVIYO_API_BASE = 'https://a.klaviyo.com/api';
const KLAVIYO_API_KEY = process.env.KLAVIYO_API_KEY;

async function callKlaviyoAPI(endpoint: string, method: string = 'GET', data?: any) {
  console.log(`üåê Klaviyo API: ${method} ${endpoint}`);

  if (data) {
    console.log('üì§ Klaviyo API: Request payload:', JSON.stringify(data, null, 2));
  }

  const headers: Record<string, string> = {
    'Authorization': `Klaviyo-API-Key ${KLAVIYO_API_KEY}`,
    'Accept': 'application/json',
    'revision': '2024-10-15', // Use latest API version
  };

  if (data) {
    headers['Content-Type'] = 'application/json';
  }

  const response = await fetch(`${KLAVIYO_API_BASE}${endpoint}`, {
    method,
    headers,
    body: data ? JSON.stringify(data) : undefined,
  });

  console.log(`üìä Klaviyo API: Response status ${response.status}`);

  if (!response.ok) {
    const errorText = await response.text();
    console.error('‚ùå Klaviyo API Error Response:', errorText);
    console.error('‚ùå Request that failed:', JSON.stringify({
      endpoint,
      method,
      data: data ? JSON.stringify(data, null, 2) : 'none'
    }, null, 2));
    throw new Error(`Klaviyo API error (${response.status}): ${errorText}`);
  }

  const result = await response.json();
  console.log('‚úÖ Klaviyo API: Success response received:', JSON.stringify(result, null, 2));
  return result;
}

export interface CampaignData {
  name: string;
  subject: string;
  html: string;
  from_email?: string;
  from_name?: string;
}

export async function createDraftCampaign(campaignData: CampaignData) {
  console.log('üöÄ Klaviyo: Starting createDraftCampaign...');
  console.log('üìù Campaign data:', {
    name: campaignData.name,
    subject: campaignData.subject,
    from_email: campaignData.from_email,
    htmlLength: campaignData.html?.length
  });

  try {
    // First, create a template for the campaign content
    console.log('üìÑ Klaviyo: Creating template for campaign...');
    const templatePayload = {
      data: {
        type: 'template',
        attributes: {
          name: `Template - ${campaignData.name}`,
          editor_type: 'CODE',
          html: campaignData.html,
          text: `Campaign: ${campaignData.name}\n\nSubject: ${campaignData.subject}\n\nGenerated by AI Merchandising Co-Pilot`,
        }
      }
    };

    let templateId;
    try {
      const templateResponse = await callKlaviyoAPI('/templates/', 'POST', templatePayload);
      templateId = templateResponse.data.id;
      console.log(`‚úÖ Klaviyo: Template created with ID: ${templateId}`);
    } catch (templateError) {
      console.log('‚ö†Ô∏è Klaviyo: Template creation failed, proceeding without template');
      templateId = null;
    }

    // Create the campaign with correct campaign-messages structure
    console.log('üõ†Ô∏è  Klaviyo: Creating campaign with embedded message...');
    const campaignPayload = {
      data: {
        type: 'campaign',
        attributes: {
          name: campaignData.name,
          audiences: {
            included: ["TGG8j8"], // Use Email List - TODO: make this configurable
            excluded: []
          },
          'campaign-messages': {
            data: [{
              type: 'campaign-message',
              attributes: {
                channel: 'email',
                label: 'Email',
                content: {
                  subject: campaignData.subject,
                  preview_text: `${campaignData.name} - Exclusive Bundle Deals`,
                  from_email: campaignData.from_email || 'demo@brand.com',
                  from_label: campaignData.from_name || 'AI Merchandiser',
                  reply_to_email: campaignData.from_email || 'demo@brand.com',
                },
                render_options: {
                  add_opt_out_language: true
                }
              }
            }]
          }
        }
      }
    };

    const campaignResponse = await callKlaviyoAPI('/campaigns/', 'POST', campaignPayload);
    const campaignId = campaignResponse.data.id;
    const campaignMessageId = campaignResponse.data.relationships['campaign-messages']?.data?.[0]?.id;

    console.log(`‚úÖ Klaviyo: Campaign created with ID: ${campaignId}`);
    console.log(`‚úÖ Klaviyo: Campaign message ID: ${campaignMessageId}`);

    // Assign template to campaign message if template was created successfully
    if (templateId && campaignMessageId) {
      console.log('üîó Klaviyo: Assigning template to campaign message...');
      try {
        const assignTemplatePayload = {
          data: {
            type: 'template',
            id: templateId
          }
        };

        await callKlaviyoAPI(`/campaign-messages/${campaignMessageId}/relationships/template/`, 'POST', assignTemplatePayload);
        console.log(`‚úÖ Klaviyo: Template ${templateId} assigned to campaign message ${campaignMessageId}`);
      } catch (templateAssignError) {
        console.log(`‚ö†Ô∏è Klaviyo: Template assignment failed, but campaign was created: ${templateAssignError}`);
      }
    }

    return {
      id: campaignId,
      status: 'draft',
      campaign: {
        ...campaignResponse.data,
        template_id: templateId
      },
    };

  } catch (error) {
    console.error('‚ùå Klaviyo: Error creating real campaign:', error);

    // Fallback to mock for demo if API fails
    console.log('üé≠ Klaviyo: API failed, creating mock response for demo...');
    const mockResponse = {
      id: `mock_campaign_${Date.now()}`,
      status: 'mock_created',
      error: error instanceof Error ? error.message : 'API call failed',
      campaign: {
        name: campaignData.name,
        subject: campaignData.subject,
        html: campaignData.html,
        from_email: campaignData.from_email,
        from_name: campaignData.from_name,
        created_at: new Date().toISOString(),
        status: 'draft',
      },
    };
    console.log('‚úÖ Klaviyo: Mock response created:', mockResponse);
    return mockResponse;
  }
}

export function generateCampaignHTML(bundles: Bundle[], theme: string, bundleCreationResult?: any): string {
  const bundleHTML = bundles.map(bundle => {
    // Find the corresponding created product if available
    const createdProduct = bundleCreationResult?.bundleResult?.products?.find((p: any) => p.name === bundle.name);

    // Get discount code and checkout URL if available
    const discountCode = (bundle as any).discountCode || '';
    const checkoutUrl = (bundle as any).checkoutUrl || (bundle as any).checkoutSession?.url || "#shop-bundle";

    // Generate product URL - use real product link if available, otherwise placeholder
    const productUrl = createdProduct?.slug
      ? `https://your-store.com/products/${createdProduct.slug}`
      : checkoutUrl;

    // Bundle image handling
    const bundleImageUrl = (bundle as any).bundleImageUrl;
    const bundleImageHTML = bundleImageUrl && !bundleImageUrl.includes('placeholder')
      ? `<img src="${bundleImageUrl}" alt="${bundle.name}" style="max-width: 300px; height: auto; border-radius: 8px; margin: 10px 0;" />`
      : '';

    return `
    <div style="margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 8px; background: #fff;">
      ${bundleImageHTML}
      <h2 style="color: #333; margin: 0 0 10px 0;">${bundle.name}</h2>
      <p style="color: #666; line-height: 1.6; margin: 10px 0;">${bundle.emailBlurb}</p>
      <div style="margin: 15px 0;">
        <span style="font-size: 24px; font-weight: bold; color: #e74c3c;">$${(bundle.targetPrice / 100).toFixed(2)}</span>
        <span style="margin-left: 10px; color: #27ae60; font-weight: bold;">${bundle.discountPercent}% OFF</span>
        ${discountCode ? `<div style="margin: 10px 0; padding: 8px; background: #f8f9fa; border-radius: 4px; border-left: 4px solid #27ae60;"><strong>Discount Code:</strong> <code style="background: #e9ecef; padding: 2px 6px; border-radius: 3px;">${discountCode}</code></div>` : ''}
      </div>
      <p style="font-style: italic; color: #888; font-size: 12px;">Bundle includes: ${bundle.skus.join(', ')}</p>
      ${createdProduct ?
        `<p style="font-size: 10px; color: #27ae60; margin: 5px 0;">‚úÖ Available in commercetools (SKU: ${createdProduct.sku})</p>` :
        `<p style="font-size: 10px; color: #f39c12; margin: 5px 0;">‚ö†Ô∏è Bundle product not yet created</p>`
      }
      <div style="margin-top: 15px;">
        <a href="${productUrl}" style="background-color: #3498db; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block; font-weight: bold;">
          ${checkoutUrl.includes('stripe') ? 'üõí Buy Bundle Now' : (createdProduct ? 'Shop This Bundle' : 'Shop Now')}
        </a>
        ${discountCode && checkoutUrl === "#shop-bundle" ? `<p style="font-size: 11px; color: #666; margin-top: 8px;">Use code <strong>${discountCode}</strong> at checkout</p>` : ''}
      </div>
    </div>
  `;
  }).join('');

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>${theme} - Limited-Time Bundles</title>
      <style>
        body { font-family: 'Arial', sans-serif; max-width: 600px; margin: 0 auto; }
      </style>
    </head>
    <body>
      <div style="text-align: center; padding: 20px; background-color: #f8f9fa;">
        <h1 style="color: #2c3e50; margin: 0;">${theme}</h1>
        <p style="color: #7f8c8d; margin: 10px 0 0 0;">Exclusive Bundle Deals Just For You</p>
      </div>

      <div style="padding: 20px;">
        ${bundleHTML}

        <div style="text-align: center; margin-top: 30px; padding: 20px; background-color: #ecf0f1; border-radius: 8px;">
          <p style="color: #34495e; margin: 0; font-size: 14px;">
            These exclusive bundles are available for a limited time only.
          </p>
        </div>
      </div>

      <div style="text-align: center; padding: 20px; background-color: #f8f9fa; color: #7f8c8d; font-size: 12px;">
        <p>Generated by AI Merchandising Co-Pilot</p>
      </div>
    </body>
    </html>
  `;
}

export async function createBundleCampaign(bundles: Bundle[], theme: string, customHtml?: string, bundleCreationResult?: any) {
  console.log(`üéØ Klaviyo: Creating bundle campaign for "${theme}" with ${bundles.length} bundles`);
  console.log(`üîç Klaviyo: Function parameters check:`, {
    hasCustomHtml: !!customHtml,
    customHtmlLength: customHtml?.length || 0,
    customHtmlType: typeof customHtml,
    customHtmlIsString: typeof customHtml === 'string',
    customHtmlTruthy: !!customHtml
  });

  const campaignName = `${theme} - Bundle Campaign - ${new Date().toLocaleDateString()}`;
  const subject = `üî• ${theme} Bundles - Limited Time!`;

  let html: string;
  if (customHtml && typeof customHtml === 'string' && customHtml.trim().length > 0) {
    console.log('‚ú® Klaviyo: Using custom optimized HTML from Lovable...');
    console.log(`‚ú® Klaviyo: Custom HTML preview: ${customHtml.substring(0, 200)}...`);
    html = customHtml;
  } else {
    console.log('üìß Klaviyo: Generating default campaign HTML...');
    console.log(`‚ö†Ô∏è Klaviyo: Reason for not using custom HTML:`, {
      noCustomHtml: !customHtml,
      notString: typeof customHtml !== 'string',
      emptyString: customHtml && typeof customHtml === 'string' && customHtml.trim().length === 0
    });
    html = generateCampaignHTML(bundles, theme, bundleCreationResult);
  }
  console.log(`üìù Klaviyo: HTML ready (${html.length} characters)`);

  const campaignData = {
    name: campaignName,
    subject,
    html,
    from_email: 'campaigns@yourbrand.com',
    from_name: 'Your Brand Team',
  };

  console.log('üöÄ Klaviyo: Calling createDraftCampaign...');
  return await createDraftCampaign(campaignData);
}